version: '3.8'

services:
  # =============================================================================
  # BACKEND SERVICE
  # =============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mosdac-backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - APP_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/mosdac_db
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
    depends_on:
      - postgres
      - redis
      - neo4j
    networks:
      - mosdac-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # FRONTEND SERVICE
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mosdac-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    depends_on:
      - backend
    networks:
      - mosdac-network
    restart: unless-stopped

  # =============================================================================
  # POSTGRESQL DATABASE
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: mosdac-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=mosdac_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/setup/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - mosdac-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # REDIS CACHE
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: mosdac-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass password
    volumes:
      - redis_data:/data
    networks:
      - mosdac-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # NEO4J GRAPH DATABASE
  # =============================================================================
  neo4j:
    image: neo4j:5-community
    container_name: mosdac-neo4j
    ports:
      - "7474:7474"  # Web interface
      - "7687:7687"  # Bolt protocol
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_dbms_default__database=neo4j
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_security_procedures_unrestricted=gds.*,apoc.*
      - NEO4J_dbms_security_procedures_allowlist=gds.*,apoc.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_conf:/conf
      - neo4j_plugins:/plugins
    networks:
      - mosdac-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # ELASTICSEARCH (for advanced search)
  # =============================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mosdac-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - mosdac-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # KIBANA (for log visualization)
  # =============================================================================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: mosdac-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - mosdac-network
    restart: unless-stopped

  # =============================================================================
  # PROMETHEUS (for metrics)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: mosdac-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - mosdac-network
    restart: unless-stopped

  # =============================================================================
  # GRAFANA (for monitoring dashboards)
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: mosdac-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json
    depends_on:
      - prometheus
    networks:
      - mosdac-network
    restart: unless-stopped

  # =============================================================================
  # NGINX (reverse proxy)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: mosdac-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/docker/nginx.conf:/etc/nginx/nginx.conf
      - ./config/docker/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - mosdac-network
    restart: unless-stopped

  # =============================================================================
  # JUPYTER NOTEBOOK (for data science)
  # =============================================================================
  jupyter:
    image: jupyter/scipy-notebook:latest
    container_name: mosdac-jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=mosdac-jupyter-token
    networks:
      - mosdac-network
    restart: unless-stopped

  # =============================================================================
  # CELERY WORKER (for background tasks)
  # =============================================================================
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mosdac-celery-worker
    command: celery -A app.core.celery worker --loglevel=info
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - APP_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/mosdac_db
      - REDIS_URL=redis://redis:6379
      - NEO4J_URI=bolt://neo4j:7687
    depends_on:
      - postgres
      - redis
      - neo4j
    networks:
      - mosdac-network
    restart: unless-stopped

  # =============================================================================
  # CELERY BEAT (for scheduled tasks)
  # =============================================================================
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mosdac-celery-beat
    command: celery -A app.core.celery beat --loglevel=info
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - APP_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/mosdac_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - mosdac-network
    restart: unless-stopped

  # =============================================================================
  # FLOWER (for Celery monitoring)
  # =============================================================================
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mosdac-flower
    command: celery -A app.core.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    networks:
      - mosdac-network
    restart: unless-stopped

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_conf:
    driver: local
  neo4j_plugins:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  mosdac-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16